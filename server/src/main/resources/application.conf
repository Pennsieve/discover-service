environment = "local"
environment = ${?ENVIRONMENT}

public-url = "https://discover.pennsieve.org"
public-url = ${?DISCOVER_PUBLIC_URL}

assets-url = "https://assets.discover.pennsieve.org"
assets-url = ${?DISCOVER_ASSETS_URL}

jwt {
  key = "testKey"
  key = ${?DISCOVER_JWT_SECRET_KEY}
  duration = "5 minutes"
}

postgres {
  host = "localhost"
  host = ${?DISCOVER_POSTGRES_HOST}
  port = 5432
  port = ${?DISCOVER_POSTGRES_PORT}
  database = "discover_postgres"
  user = "postgres"
  user = ${?DISCOVER_POSTGRES_USER}
  password = "password"
  password = ${?DISCOVER_POSTGRES_PASSWORD}
  num-connections = 16
  num-connections = ${?DISCOVER_POSTGRES_NUM_CONNECTIONS}
  queue-size = 1000
  queue-size = ${?DISCOVER_POSTGRES_QUEUE_SIZE}
}

doi-service {
    host = "doi.doi"
    host = ${?DOI_SERVICE_HOST}
}

aws-elastic-search {
  host = "http://localhost"
  host = ${?DISCOVER_ELASTICSEARCH_HOST}
  port = 80
  port = ${?DISCOVER_ELASTICSEARCH_PORT}
}

aws-step-functions {
  publish-state-machine-arn = ""
  publish-state-machine-arn = ${?PUBLISH_STATE_MACHINE_ARN}
  release-state-machine-arn = ""
  release-state-machine-arn = ${?RELEASE_STATE_MACHINE_ARN}
  region = "us-east-1"
  region = ${?REGION}
}

aws-lambda {
    lambda-function = "dev-discover-s3clean-lambda-use1"
    lambda-function = ${?DISCOVER_S3CLEAN_LAMBDA}
    region = "us-east-1"
    region = ${?REGION}
    parallelism = 1
}

s-3 {
  region = "us-east-1"
  region = ${?REGION}
  publish-bucket = "dev-discover-publish-use1"
  publish-bucket = ${?S3_PUBLISH_BUCKET}
  frontend-bucket = "dev-discover-use1"
  frontend-bucket = ${?S3_FRONTEND_BUCKET}
  assets-key-prefix = "dataset-assets"
  assets-key-prefix = ${?S3_ASSETS_KEY_PREFIX}
  embargo-bucket = "dev-discover-embargo-use1"
  embargo-bucket = ${?S3_EMBARGO_BUCKET}
  publish-logs-bucket = "dev-discover-publish-logs-use1"
  publish-logs-bucket = ${?S3_PUBLISH_BUCKET_LOGS}
  access-logs-path = "dev/discover-publish/s3/"
  access-logs-path = ${?S3_ACCESS_LOGS_PATH}
  parallelism = 1
  publish-50-bucket = "dev-discover-publish-use1"
  publish-50-bucket = ${?S3_PUBLISH_50_BUCKET}
  embargo-50-bucket = "dev-discover-embargo-use1"
  embargo-50-bucket = ${?S3_EMBARGO_50_BUCKET}
}

sqs {
  region = "us-east-1"
  region = ${?REGION}
  queue-url = "http://localhost:9324/queue/test-queue"
  queue-url = ${?QUEUE_URL}
  parallelism = 1
}

sns {
  alert-topic = "alert-topic"
  alert-topic = ${?ALERT_TOPIC}
  region = "us-east-1"
  region = ${?REGION}
}

pennsieve-api {
  host = "https://dev-api-use1.pennsieve.net"
  host = ${?API_HOST}
}

authorization-service {
  host = "https://dev-authorization-service-use1.pennsieve.net"
  host = ${?AUTHORIZATION_SERVICE_HOST}
}


download {
  max-size = 1 GB
  max-size = ${?DOWNLOAD_MAX_SIZE}
  rate-per-second = 5 MB
}

alpakka.s3 {
  aws {
    region {
      provider = static
      default-region = "us-east-1"
      default-region = ${?REGION}
    }
  }
  access-style = path
}

akka {
  http {
    host-connection-pool {
      idle-timeout = 900 s
      max-open-requests = 128
    }
    client {
      idle-timeout = 900 s
    }
  }
}

athena {
    pennsieve-bucket-access-table = "s3_access_logs_db.discover"
    pennsieve-bucket-access-table = ${?PENNSIEVE_BUCKET_ACCESS_GLUE_TABLE}

    sparc-bucket-access-table = "sparc_glue_catalog.dev_s3_access_logs_db.discover"
    sparc-bucket-access-table = ${?SPARC_BUCKET_ACCESS_GLUE_TABLE}

  default {
    driver = "com.simba.athena.jdbc.Driver"
    driver = ${?ATHENA_DRIVER}
    url = "jdbc:awsathena://AwsRegion=us-east-1"
    url = ${?ATHENA_URL}
    readOnly = "false"
    readOnly = ${?ATHENA_READ_ONLY}
    S3OutputLocation = "s3://dev-discover-publish-logs-use1/dev/discover-publish/athena-query-results/"
    S3OutputLocation = ${?S3_ATHENA_OUTPUT_LOCATION}
    AwsCredentialsProviderClass = "com.simba.athena.amazonaws.auth.DefaultAWSCredentialsProviderChain"
    AwsCredentialsProviderClass = ${?AWS_CREDENTIALS_PROVIDER_CLASS}
  }
}

external-publish-buckets = [
    {
        bucket = ${SPARC_PUBLISH_50_BUCKET}
        role-arn = ${SPARC_BUCKET_ROLE_ARN}
    },
    {
        bucket = ${SPARC_EMBARGO_50_BUCKET}
        role-arn = ${SPARC_BUCKET_ROLE_ARN}
    }
]
